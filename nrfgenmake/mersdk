#!/usr/bin/env python

'''

  mersdk configfile1 configfile2

  reads and compares two nRF5 sdk_config.h files, 
  as programming tool to check how the two differ 
  with respect to what is enabled and what is not

  far from perfect, this could be a starting 
  approach to a more intelligent tool

'''

import sys

# function to parse one line of "#defined ....ENABLED 1"  
def entry(D,S):
  for line in S:
    R = line.strip().split()  
    if len(R) < 3: D[R[1]] = "?"
    else:          D[R[1]] = R[2]

# get file names from command arguments
def getargs():
  assert len(sys.argv) == 3
  _,first,second = sys.argv
  return (first,second)

# main logic compares two sdk_config files
def compare(a,b):
  first,second = getargs()  
  with open(a) as Base, open(b) as Other:
    A = [ line for line in Base if line.startswith("#define") and "ENABLED" in line ]
    B = [ line for line in Other if line.startswith("#define") and "ENABLED" in line ]

  Asets,Bsets = dict(),dict()

  # make sets of enabled config variables
  entry(Asets,A)
  entry(Bsets,B)

  # which are only in Asets
  for k in sorted(Asets.keys()):
    if k not in Bsets:
      sys.stdout.write("{0} uniquely in A\n".format(k)) 

  # which are only in Bsets
  for k in sorted(Bsets.keys()):
    if k not in Asets:
      sys.stdout.write("{0} uniquely in B\n".format(k)) 

  # which disagree on values between Asets and Bsets
  for k in sorted(list(set(Asets.keys()) & set(Bsets.keys()))):
    if Asets[k] != Bsets[k]:  
      sys.stdout.write("{0} disagrees between A and B\n".format(k)) 

# launch goes here
if __name__ == "__main__": 
  a,b = getargs()
  compare(a,b)
