#!/usr/bin/env python3

import sys, os, subprocess
import datetime, csv

fence = b'\x00\x00\x00\x00\xaaU\xaaU\xaaU\xaaU'
	
def getfile():

  path_Linux = os.path.exists('/usr/bin/find /media')
  path_USB_Mac = os.path.exists('/Volumes/Anchor_SD/')
  path_USB = os.path.exists('D:/')
  path_Linux = int(path_Linux)
  path_USB_Mac = int(path_USB_Mac)
  path_USB = int(path_USB)
  
  if path_Linux > 0:
    cmd = '/usr/bin/find /media -name ANCR*.DAT'.split() 
    path = '/usr/bin/find /media'
  elif path_USB_Mac > 0:
    cmd = 'ls /Volumes/Anchor_SD/ ANCR*.DAT'    
    path = '/Volumes/Anchor_SD/'
  else:
    cmd = 'dir D: ANCR*.DAT'
    path = 'D:/'
 
  S = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
  R = S.communicate()
  
  if not isinstance(R[0],bytes):
    print("SD card media file not found")
    sys.exit(1)
  L = R[0].split()
  F = None
  for candidate in L:
    name = candidate.split(b'/')[-1]
    if name.startswith(b'ANCR') and name.endswith(b'.DAT'): 
      F = candidate
      F = F.decode()
      F = path + F
      F = F.encode()
      break
  if not F: 
    print("SD card media file not found")
    sys.exit(1)
  with open(F,'rb') as V:
    return V.read()  # entire content of file

def procrec(P,offset,filename):
  p = P[offset:5+offset]
  ptime = p[3]*256*256*256 + p[2]*256*256 + p[1]*256 + p[0]
  if ptime > 1550000000:
    ptime = datetime.datetime.fromtimestamp(ptime)
  rssi = p[4] 
  result = "{0}: msg rssi {1} ".format(ptime,rssi)
  p = P[5+offset:5+6+offset]
  ptime = p[3]*256*256*256 + p[2]*256*256 + p[1]*256 + p[0]
  if ptime > 1550000000:
    ptime = datetime.datetime.fromtimestamp(ptime)
  moteid = p[4] 
  result += "<- badge {0:02d} @ {1} ".format(moteid,ptime)
  numrep = p[5]
  newoffset = 11  # where the variable stuff starts 
  for i in range(numrep):
    other,rssi = P[offset+newoffset+i*2],P[offset+newoffset+i*2+1]
    result += "[{0}:{1}] ".format(other,rssi)
    
  # sys.stdout.write(result + "\n")

  result = result.split(" ")
  deletion_index = [2, 3, 5, 6, 8]
  result = [i for i in result if result.index(i) not in deletion_index]
  with open(filename, "a+") as csvfile: 
      csvwriter = csv.writer(csvfile, lineterminator="\n")
      csvwriter.writerow(result)
      
  return newoffset + 2*numrep

def procblock(S):
  n = S[1]*256 + S[0] # number of records
  cursor = 2  # offset to where the first record starts
  for i in range(n): 
    cursor += procrec(S,cursor,filename)

def convert():
  B = getfile()
  if not B: sys.exit(1)
  C = B.split(fence)
  for R in C:
    S = bytearray(R)    # make processing easy with array of int
    if not S: continue  # first element of split is empty (fence at begin) 
    #n = S[1]*256 + S[0] # node ID  
    #print("NODE",n)
    procblock(S[2:])
    
def return_anchor():

  path_Linux = os.path.exists('/usr/bin/find /media')
  path_USB_Mac = os.path.exists('/Volumes/Anchor_SD/')
  path_USB = os.path.exists('D:/')
  path_Linux = int(path_Linux)
  path_USB_Mac = int(path_USB_Mac)
  path_USB = int(path_USB)
  
  if path_Linux > 0:
    cmd = '/usr/bin/find /media -name ANCR*.DAT'.split() 
    path = '/usr/bin/find /media'
  elif path_USB_Mac > 0:
    cmd = 'ls /Volumes/Anchor_SD/ ANCR*.DAT'    
    path = '/Volumes/Anchor_SD/'
  else:
    cmd = 'dir D: ANCR*.DAT'
    path = 'D:/'
 
  S = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
  R = S.communicate()
  
  if not isinstance(R[0],bytes):
    print("SD card media file not found")
    sys.exit(1)
  L = R[0].split()
  F = None
  for candidate in L:
    name = candidate.split(b'/')[-1]
    if name.startswith(b'ANCR') and name.endswith(b'.DAT'): 
      F = candidate
      F = F.decode()
      F = ''.join(filter(str.isdigit, F))
      return F
  if not F: 
    print("SD card media file not found")
    sys.exit(1)

 
anchor_number = return_anchor()
filename = "output" + anchor_number + ".csv"

if not os.path.exists(filename):
    with open(filename, "w") as csvfile:  
        csvwriter = csv.writer(csvfile, lineterminator="\n")
        #csvwriter.writerow(["Date", "Time", "rssi", "Badge"])
else:
    print("WARNING: File already exists")
    sys.exit(1)
    
    
convert()

csvfile.close()